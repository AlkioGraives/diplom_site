import mysql.connector

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
db = mysql.connector.connect(
    host="localhost",
    user="root",
    password="root",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å
    database="botanical_db"
)

cursor = db.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
def init_db():
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS taxonomy (
            id INT AUTO_INCREMENT PRIMARY KEY,
            family VARCHAR(100),
            genus VARCHAR(100),
            species VARCHAR(100)
        )
    """)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS plants (
            id INT AUTO_INCREMENT PRIMARY KEY,
            name_ru VARCHAR(255),
            name_lat VARCHAR(255),
            description TEXT,
            taxonomy_id INT,
            FOREIGN KEY (taxonomy_id) REFERENCES taxonomy(id) ON DELETE CASCADE
        )
    """)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS audit_log (
            id INT AUTO_INCREMENT PRIMARY KEY,
            table_name VARCHAR(50),
            action_type VARCHAR(10),
            record_id INT,
            content TEXT,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    """)
    db.commit()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π
def log_audit(table_name, action_type, record_id, content):
    cursor.execute(
        "INSERT INTO audit_log (table_name, action_type, record_id, content) VALUES (%s, %s, %s, %s)",
        (table_name, action_type, record_id, content)
    )
    db.commit()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è
def add_plant():
    family = input("–°–µ–º–µ–π—Å—Ç–≤–æ: ")
    genus = input("–†–æ–¥: ")
    species = input("–í–∏–¥: ")
    name_ru = input("–†—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: ")
    name_lat = input("–õ–∞—Ç–∏–Ω—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: ")
    description = input("–û–ø–∏—Å–∞–Ω–∏–µ: ")

    cursor.execute("INSERT INTO taxonomy (family, genus, species) VALUES (%s, %s, %s)", (family, genus, species))
    taxonomy_id = cursor.lastrowid
    log_audit("taxonomy", "INSERT", taxonomy_id, f"{family} / {genus} / {species}")

    cursor.execute("INSERT INTO plants (name_ru, name_lat, description, taxonomy_id) VALUES (%s, %s, %s, %s)",
                   (name_ru, name_lat, description, taxonomy_id))
    plant_id = cursor.lastrowid
    log_audit("plants", "INSERT", plant_id, f"{name_ru} / {name_lat} / {description}")

    db.commit()
    print("‚úÖ –†–∞—Å—Ç–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")

# –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π
def list_plants():
    cursor.execute("""
        SELECT p.id, p.name_ru, p.name_lat, t.family, t.genus, t.species
        FROM plants p
        JOIN taxonomy t ON p.taxonomy_id = t.id
    """)
    plants = cursor.fetchall()
    if not plants:
        print("üîç –ó–∞–ø–∏—Å–µ–π –Ω–µ—Ç.")
    for row in plants:
        print(f"[{row[0]}] {row[1]} ({row[2]}) ‚Äî {row[3]} / {row[4]} / {row[5]}")

# –ü–æ–∏—Å–∫ —Ä–∞—Å—Ç–µ–Ω–∏—è
def search_plant():
    keyword = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (—Ä—É—Å—Å–∫–æ–µ –∏–ª–∏ –ª–∞—Ç–∏–Ω—Å–∫–æ–µ): ")
    cursor.execute("""
        SELECT p.id, p.name_ru, p.name_lat, p.description
        FROM plants p
        WHERE p.name_ru LIKE %s OR p.name_lat LIKE %s
    """, (f"%{keyword}%", f"%{keyword}%"))
    results = cursor.fetchall()
    if not results:
        print("üîç –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    for row in results:
        print(f"[{row[0]}] {row[1]} ({row[2]})\n–û–ø–∏—Å–∞–Ω–∏–µ: {row[3]}\n")

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
def update_plant():
    plant_id = input("ID —Ä–∞—Å—Ç–µ–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ")
    new_desc = input("–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: ")
    cursor.execute("UPDATE plants SET description = %s WHERE id = %s", (new_desc, plant_id))
    log_audit("plants", "UPDATE", plant_id, f"–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {new_desc}")
    db.commit()
    print("‚úèÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")

# –£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è
def delete_plant():
    plant_id = input("ID —Ä–∞—Å—Ç–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ")
    cursor.execute("SELECT name_ru, name_lat FROM plants WHERE id = %s", (plant_id,))
    result = cursor.fetchone()
    if result:
        name_ru, name_lat = result
        log_audit("plants", "DELETE", plant_id, f"{name_ru} / {name_lat}")
    cursor.execute("DELETE FROM plants WHERE id = %s", (plant_id,))
    db.commit()
    print("üóëÔ∏è –†–∞—Å—Ç–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
def insert_sample_data():
    samples = [
        {
            "family": "Betulaceae",
            "genus": "Betula",
            "species": "pendula",
            "name_ru": "–ë–µ—Ä—ë–∑–∞ –ø–æ–≤–∏—Å–ª–∞—è",
            "name_lat": "Betula pendula",
            "description": "–õ–∏—Å—Ç–≤–µ–Ω–Ω–æ–µ –¥–µ—Ä–µ–≤–æ, —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—ë–Ω–Ω–æ–µ –≤ –ï–≤—Ä–æ–ø–µ –∏ –ê–∑–∏–∏."
        },
        {
            "family": "Pinaceae",
            "genus": "Pinus",
            "species": "sylvestris",
            "name_ru": "–°–æ—Å–Ω–∞ –æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω–∞—è",
            "name_lat": "Pinus sylvestris",
            "description": "–•–≤–æ–π–Ω–æ–µ –¥–µ—Ä–µ–≤–æ, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω–æ–µ –¥–ª—è —Ö–≤–æ–π–Ω—ã—Ö –ª–µ—Å–æ–≤ –ï–≤—Ä–æ–ø—ã –∏ –ê–∑–∏–∏."
        },
        {
            "family": "Asteraceae",
            "genus": "Taraxacum",
            "species": "officinale",
            "name_ru": "–û–¥—É–≤–∞–Ω—á–∏–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π",
            "name_lat": "Taraxacum officinale",
            "description": "–ú–Ω–æ–≥–æ–ª–µ—Ç–Ω–µ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ —Å –∂—ë–ª—Ç—ã–º–∏ —Ü–≤–µ—Ç–∫–∞–º–∏ –∏ –≥–ª—É–±–æ–∫–∏–º –∫–æ—Ä–Ω–µ–º."
        }
    ]

    for plant in samples:
        cursor.execute(
            "INSERT INTO taxonomy (family, genus, species) VALUES (%s, %s, %s)",
            (plant["family"], plant["genus"], plant["species"])
        )
        taxonomy_id = cursor.lastrowid
        log_audit("taxonomy", "INSERT", taxonomy_id, f"{plant['family']} / {plant['genus']} / {plant['species']}")

        cursor.execute(
            "INSERT INTO plants (name_ru, name_lat, description, taxonomy_id) VALUES (%s, %s, %s, %s)",
            (plant["name_ru"], plant["name_lat"], plant["description"], taxonomy_id)
        )
        plant_id = cursor.lastrowid
        log_audit("plants", "INSERT", plant_id, f"{plant['name_ru']} / {plant['name_lat']} / {plant['description']}")

    db.commit()
    print("‚úÖ –ü—Ä–æ–±–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã.")

def view_audit_log():
    cursor.execute("""
        SELECT id, table_name, action_type, record_id, content, timestamp
        FROM audit_log
        ORDER BY timestamp DESC
        LIMIT 100
    """)
    logs = cursor.fetchall()
    if not logs:
        print("üïµÔ∏è –ñ—É—Ä–Ω–∞–ª –∞—É–¥–∏—Ç–∞ –ø—É—Å—Ç.")
    else:
        print("\nüìë –ñ—É—Ä–Ω–∞–ª –∞—É–¥–∏—Ç–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è):")
        for log in logs:
            print(f"[{log[0]}] [{log[5]}] {log[1]} - {log[2]} (ID: {log[3]})")
            print(f"     ‚Üí {log[4]}")

# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
def main():
    init_db()
    while True:
        print("\nüìö –ë–æ—Ç–∞–Ω–∏—á–µ—Å–∫–∏–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫")
        print("1. –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ")
        print("2. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ä–∞—Å—Ç–µ–Ω–∏—è")
        print("3. –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é")
        print("4. –û–±–Ω–æ–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ")
        print("5. –£–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ")
        print("6. –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–±–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        print("7. –í—ã—Ö–æ–¥")
        print("8. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∂—É—Ä–Ω–∞–ª –∞—É–¥–∏—Ç–∞")
        choice = input("–í—ã–±–æ—Ä: ")
        if choice == "1":
            add_plant()
        elif choice == "2":
            list_plants()
        elif choice == "3":
            search_plant()
        elif choice == "4":
            update_plant()
        elif choice == "5":
            delete_plant()
        elif choice == "6":
            insert_sample_data()
        elif choice == "7":
            print("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
            break
        elif choice == "8":
            view_audit_log()
        else:
            print("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥.")


if __name__ == "__main__":
    main()
